// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Parking.Repository.Context;

namespace Parking.Repository.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Parking.Domain.Assessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comments");

                    b.Property<int>("DriverId");

                    b.Property<int>("ParkingsId");

                    b.Property<int>("Rate");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("ParkingsId");

                    b.ToTable("assessments");
                });

            modelBuilder.Entity("Parking.Domain.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ArrivingTime");

                    b.Property<int>("SpaceId");

                    b.Property<int>("Status");

                    b.Property<int>("VehicleId");

                    b.HasKey("Id");

                    b.HasIndex("SpaceId");

                    b.HasIndex("VehicleId");

                    b.ToTable("bookings");
                });

            modelBuilder.Entity("Parking.Domain.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Cellphone");

                    b.Property<long>("Dni");

                    b.Property<string>("Email");

                    b.Property<string>("FullName");

                    b.HasKey("Id");

                    b.ToTable("drivers");
                });

            modelBuilder.Entity("Parking.Domain.Owner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Cellphone");

                    b.Property<string>("CompanyName");

                    b.Property<long>("DNI");

                    b.Property<string>("Email");

                    b.Property<string>("FullName");

                    b.Property<string>("RUC");

                    b.HasKey("Id");

                    b.ToTable("owners");
                });

            modelBuilder.Entity("Parking.Domain.Parkings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("Cellphone");

                    b.Property<string>("Country");

                    b.Property<string>("Description");

                    b.Property<string>("Location");

                    b.Property<string>("Name");

                    b.Property<int>("NroSpaces");

                    b.Property<int>("OwnerId");

                    b.Property<string>("Park_Type");

                    b.Property<string>("Photo_Reference");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("parkings");
                });

            modelBuilder.Entity("Parking.Domain.Rate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Frecuency");

                    b.Property<int>("Price");

                    b.Property<string>("Veh_Type");

                    b.HasKey("Id");

                    b.ToTable("rates");
                });

            modelBuilder.Entity("Parking.Domain.Space", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Available");

                    b.Property<int>("DriverId");

                    b.Property<int>("ParkingsId");

                    b.Property<string>("Tag");

                    b.Property<int?>("VehicleId");

                    b.HasKey("Id");

                    b.HasIndex("ParkingsId");

                    b.HasIndex("VehicleId");

                    b.ToTable("spaces");
                });

            modelBuilder.Entity("Parking.Domain.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CarPlate");

                    b.Property<int>("DriverId");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.ToTable("vehicles");
                });

            modelBuilder.Entity("Parking.Domain.Assessment", b =>
                {
                    b.HasOne("Parking.Domain.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Parking.Domain.Parkings", "Parkings")
                        .WithMany()
                        .HasForeignKey("ParkingsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Parking.Domain.Booking", b =>
                {
                    b.HasOne("Parking.Domain.Space", "Space")
                        .WithMany()
                        .HasForeignKey("SpaceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Parking.Domain.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Parking.Domain.Parkings", b =>
                {
                    b.HasOne("Parking.Domain.Owner", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Parking.Domain.Space", b =>
                {
                    b.HasOne("Parking.Domain.Parkings", "Parkings")
                        .WithMany()
                        .HasForeignKey("ParkingsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Parking.Domain.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId");
                });

            modelBuilder.Entity("Parking.Domain.Vehicle", b =>
                {
                    b.HasOne("Parking.Domain.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
